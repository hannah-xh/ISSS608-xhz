{
  "hash": "f6ab2d835859766a75f8519b66188328",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ship Performance Visualization\"\nauthor: \"Xiaohan Zhang\"\ndate: \"February 16-2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n![](images/clipboard-2644673784.png)\n\n\n---\ntitle: \"Ship Performance Visualization\"\nauthor: \"Xiaohan Zhang\"\ndate: \"February 16-2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load required packages\npacman::p_load(ggplot2, tidyverse)\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(ggridges)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dataset\nship_data <- read_csv(\"data/Ship_Performance_Dataset.csv\")\n\n# Glimpse of the dataset\nglimpse(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data quality checks\n# Check for missing values\nif (any(is.na(ship_data))) {\n  print(\"There are missing values in the data\")\n} else {\n  print(\"There are no missing values\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"There are no missing values\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for duplicate values\nif (any(duplicated(ship_data))) {\n  print(\"There are duplicate values in the data\")\n} else {\n  print(\"There are no duplicate values\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"There are no duplicate values\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Outlier detection\n# Identify numeric columns and compute Z-Scores\nnumeric_columns <- ship_data %>% select(where(is.numeric)) %>% names()\nz_scores <- ship_data %>% select(all_of(numeric_columns)) %>% scale() %>% as.data.frame()\n\n# Detect Outliers\noutliers <- data.frame()\n\nfor (i in 1:length(numeric_columns)) {\n  column_name <- numeric_columns[i]\n  column_z_scores <- z_scores[, i]\n  \n  # Identify outliers based on Z-scores\n  outlier_indices <- which(abs(column_z_scores) > 3)\n  \n  if (length(outlier_indices) > 0) {\n    outliers <- rbind(outliers, \n                     data.frame(\n                       Column = column_name,\n                       Row_Index = outlier_indices,\n                       Z_Score = column_z_scores[outlier_indices],\n                       Value = ship_data[[column_name]][outlier_indices]\n                     ))\n  }\n}\n\n# Output outliers detected\nif (nrow(outliers) > 0) {\n  print(\"Outliers Detected:\")\n  print(outliers %>% arrange(Column, desc(abs(Z_Score))) %>% group_by(Column) %>% slice_head(n = 5))\n} else {\n  print(\"No Outliers Detected\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No Outliers Detected\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data cleaning and preparation\nship_data_clean <- ship_data %>%\n  mutate(\n    Year = year(Date),\n    Month = month(Date),\n    YearMonth = format(Date, \"%Y-%m\"),\n    # Handle \"None\" values\n    across(where(is.character), ~na_if(., \"None\")),\n    Profit_USD = Revenue_per_Voyage_USD - Operational_Cost_USD\n  ) %>%\n  filter(complete.cases(.))  # Remove rows with NA values\n\n# Adding the Profit_Status column and converting it to a factor\nship_data_clean <- ship_data_clean %>%\n  mutate(Profit_Status = ifelse(Profit_USD >= 0, \"Profitable\", \"Loss\")) %>%\n  mutate(Profit_Status = as.factor(Profit_Status))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Time Series Analysis\ntime_analysis <- ship_data_clean %>%\n  group_by(YearMonth) %>%\n  summarise(\n    Average_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Average_Cost = mean(Operational_Cost_USD, na.rm = TRUE),\n    Voyage_Count = n()\n  ) %>%\n  pivot_longer(cols = c(Average_Revenue, Average_Cost),\n               names_to = \"Metric\",\n               values_to = \"Amount\")\n\n# Revenue and Cost Trend Plot\nggplot(time_analysis, aes(x = YearMonth, y = Amount, color = Metric, group = Metric)) +\n  geom_line() +\n  geom_point() +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"top\") +\n  labs(title = \"Trends of Revenue and Cost Over Time\", x = \"Year-Month\", y = \"Amount (USD)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Profit/Loss Analysis by Ship Type\nggplot(ship_data_clean, aes(x = Ship_Type, fill = Profit_Status)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_manual(values = c(\"Profitable\" = \"#2ecc71\", \"Loss\" = \"#e74c3c\")) +\n  theme_minimal() +\n  labs(title = \"Profit/Loss Ratio by Ship Type\", x = \"Ship Type\", y = \"Proportion\", fill = \"Profit Status\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::percent_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Profit Distribution by Ship Type\nggplot(ship_data_clean, aes(x = Ship_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"Profitable\" = \"#2ecc71\", \"Loss\" = \"#e74c3c\")) +\n  theme_minimal() +\n  labs(title = \"Profit Distribution by Ship Type\", x = \"Ship Type\", y = \"Profit (USD)\", fill = \"Profit Status\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Engine Type Analysis\nggplot(ship_data_clean, aes(x = Engine_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"Profitable\" = \"#2ecc71\", \"Loss\" = \"#e74c3c\")) +\n  theme_minimal() +\n  labs(title = \"Profit Distribution by Engine Type\", x = \"Engine Type\", y = \"Profit (USD)\", fill = \"Profit Status\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Route Type Analysis\nggplot(ship_data_clean, aes(x = Route_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"Profitable\" = \"#2ecc71\", \"Loss\" = \"#e74c3c\")) +\n  theme_minimal() +\n  labs(title = \"Profit Distribution by Route Type\", x = \"Route Type\", y = \"Profit (USD)\", fill = \"Profit Status\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Efficiency Analysis\nggplot(ship_data_clean, aes(x = Efficiency_nm_per_kWh, y = Profit_USD)) +\n  geom_density_2d_filled() +\n  geom_smooth(color = \"red\", se = TRUE) +\n  facet_wrap(~Ship_Type) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"white\") +\n  theme_minimal() +\n  labs(title = \"Efficiency vs Profit Density by Ship Type\", x = \"Efficiency (nm/kWh)\", y = \"Profit (USD)\") +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Maintenance Status Analysis\nggplot(ship_data_clean, aes(x = Maintenance_Status, y = Profit_USD, fill = Profit_Status)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"Profitable\" = \"#2ecc71\", \"Loss\" = \"#e74c3c\")) +\n  theme_minimal() +\n  labs(title = \"Profit Distribution by Maintenance Status\", x = \"Maintenance Status\", y = \"Profit (USD)\", fill = \"Profit Status\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Top Combinations Analysis\n# Top 15 Combinations with Average Profit\ntop_combinations <- ship_data_clean %>%\n  filter(!is.na(Ship_Type), !is.na(Engine_Type), !is.na(Route_Type), !is.na(Maintenance_Status), !is.na(Profit_USD)) %>%\n  group_by(Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  summarise(mean_profit = mean(Profit_USD, na.rm = TRUE)) %>%\n  arrange(desc(mean_profit)) %>%\n  head(15)\n\nggplot(top_combinations, aes(y = reorder(paste(Ship_Type, Engine_Type, Route_Type, Maintenance_Status), mean_profit), \n                             x = mean_profit, fill = mean_profit)) +\n  geom_col() +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  labs(title = \"Top 15 Combinations with Average Profit\", y = \"Combination\", x = \"Average Profit (USD)\", fill = \"Average Profit\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monthly Profit Trends\nship_data_clean %>%\n  group_by(YearMonth, Ship_Type) %>%\n  summarise(avg_profit = mean(Profit_USD)) %>%\n  ggplot(aes(x = YearMonth, y = avg_profit, color = Ship_Type, group = Ship_Type)) +\n  geom_line() +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Average Monthly Profit Trends by Ship Type\", x = \"Year-Month\", y = \"Average Profit (USD)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combination Elements Frequency Analysis\ntop_combinations_freq <- top_combinations %>%\n  gather(key = \"Variable\", value = \"Value\", Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  count(Variable, Value) %>%\n  arrange(desc(n))\n\nggplot(top_combinations_freq, aes(x = reorder(Value, n), y = n, fill = n)) +\n  geom_col() +\n  facet_wrap(~ Variable, scales = \"free_x\", ncol = 2) +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  labs(title = \"Frequency of Elements in Top 15 Combinations\", x = \"Element\", y = \"Frequency\", fill = \"Frequency\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution Analysis\nlibrary(gridExtra)\n\n# Maintenance Status Distribution\np1 <- ggplot(ship_data_clean, aes(x = Maintenance_Status)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Maintenance Status Distribution\", x = \"Maintenance Status\", y = \"Count\") +\n  theme_minimal()\n\n# Engine Type Distribution\np2 <- ggplot(ship_data_clean, aes(x = Engine_Type)) +\n  geom_bar(fill = \"lightgreen\", color = \"black\") +\n  labs(title = \"Engine Type Distribution\", x = \"Engine Type\", y = \"Count\") +\n  theme_minimal()\n\n# Ship Type Distribution\np3 <- ggplot(ship_data_clean, aes(x = Ship_Type)) +\n  geom_bar(fill = \"lightcoral\", color = \"black\") +\n  labs(title = \"Ship Type Distribution\", x = \"Ship Type\", y = \"Count\") +\n  theme_minimal()\n\n# Route Type Distribution\np4 <- ggplot(ship_data_clean, aes(x = Route_Type)) +\n  geom_bar(fill = \"lightskyblue\", color = \"black\") +\n  labs(title = \"Route Type Distribution\", x = \"Route Type\", y = \"Count\") +\n  theme_minimal()\n\n# Combine all plots\ngrid.arrange(p1, p2, p3, p4, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1--最终版-0.5_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# Standardized Frequency Analysis\n# Calculate standardized frequencies\ntop_combinations <- ship_data_clean %>%\n  filter(!is.na(Ship_Type), !is.na(Engine_Type), !is.na(Route_Type), !is.na(Maintenance_Status), !is.na(Profit_USD)) %>%\n  group_by(Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  summarise(\n    mean_profit = mean(Profit_USD, na.rm = TRUE),\n    freq = n(),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(mean_profit)) %>%\n  mutate(\n    freq_std = (freq - mean(freq)) / sd(freq)\n  )\n\n# Get top 15 after standardization\ntop_15_after <- top_combinations %>%\n  arrange(desc(freq_std)) %>%\n  head(15)\n\n# Prepare data for visualization\ntop_combinations_freq_after <- top_15_after %>%\n  gather(key = \"Variable\", value = \"Value\", Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  group_by(Variable, Value) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  ungroup() %>%\n  mutate(n = case_when(\n    Variable == \"Ship_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Ship_Type)],\n    Variable == \"Engine_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Engine_Type)],\n    Variable == \"Route_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Route_Type)],\n    Variable == \"Maintenance_Status\" ~ top_15_after$freq_std[match(Value, top_15_after$Maintenance_Status)],\n    TRUE ~ NA_real_\n  ))\n\n# Visualize standardized frequencies\nggplot(top_combinations_freq_after, aes(x = reorder(Value, n), y = n, fill = n)) +\n  geom_col() +\n  facet_wrap(~ Variable, scales = \"free_x\", ncol = 2) +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  labs(title = \"Standardized Frequency of Elements in Top 15 Combinations\", \n       x = \"Element\", y = \"Standardized Frequency\", fill = \"Standardized Frequency\") +\n  theme_minimal() +\n  theme(axis.text.x = element",
    "supporting": [
      "Take-home_Ex1--最终版-0.5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}