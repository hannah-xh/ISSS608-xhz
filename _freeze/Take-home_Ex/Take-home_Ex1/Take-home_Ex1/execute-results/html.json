{
  "hash": "df4ba7679a365cd6551cdd116d2320f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ship Performance Visualization\"\nauthor: \"Xiaohan Zhang\"\ndate: \"February 16-2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# ![](images/clipboard-3460206385.png)\n\n# 1. Overview\n\n## 1.1 Background\n\nAn international media company plans to publish an article on ship performance. My role as the Graphical Editor is to design insightful visualizations.\n\n## 1.2 Dataset Description\n\nThe [Ship Performance Dataset](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset) contains maritime operational data from ships in the Gulf of Guinea. It consists of 2736 rows and 24 columns, capturing both numerical data (ship speed, engine power, travel distance, costs, revenue, efficiency) and categorical information (ship type, route type, engine type, maintenance status, weather conditions). The dataset is synthetic but designed to realistically represent typical maritime operations data. It's available under a CC BY 4.0 license.\n\n## 1.3 Task Description\n\nUse R (tidyverse + ggplot2) for data cleaning and visualization. Goal: Create 5-10 visualizations and write 150-word analyses for each.\n\n# 2. Environment and Theme Setting\n\n## 2.1 Environment Setting\n\nFirst, install and load the required R packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(ggplot2, tidyverse)\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(ggridges)\nlibrary(patchwork)\nlibrary(tidyr)\n```\n:::\n\n\n\n| **Category** | **Package** | **Description** |\n|----|----|----|\n| **Data Manipulation** | **dplyr** | Provides a set of functions for data manipulation, including filtering (`filter()`), selecting columns (`select()`), creating new variables (`mutate()`), and summarizing data (`group_by()` + `summarize()`). |\n|  | **tidyr** | Helps reshape and clean data, offering functions like `pivot_longer()` and `pivot_wider()` for restructuring data, and `separate()` and `unite()` for splitting and merging columns. |\n| **Data Visualization** | **ggplot2** | One of the most powerful visualization packages in R, based on the \"grammar of graphics\" concept. It supports various chart types such as scatter plots, bar charts, line charts, and more. |\n|  | **ggridges** | Extends ggplot2 to create ridge plots, which are useful for visualizing distributions across multiple categories. |\n| **Visualization Enhancement** | **scales** | Helps format scales in ggplot2, such as adjusting axis labels, customizing color mapping, and formatting dates/numbers. |\n| **Plot Layout Management** | **patchwork** | Allows for the easy combination of multiple ggplot2 plots into a single layout, making comparative visualization easier. |\n\n## 2.2 Theme Setting\n\nUse the following code to customize the theme, which will help reduce workload when beautifying charts later.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_custom <- theme_minimal() +\n  theme(\n    plot.title = element_text(size = 10, face = \"bold\", margin = margin(b = 10)),\n    plot.subtitle = element_text(size = 10, color = \"grey50\"),\n    axis.title = element_text(size = 9),\n    axis.text = element_text(size = 7),\n    legend.position = \"right\",\n    legend.title = element_text(size = 9),\n    legend.text = element_text(size = 7),\n    panel.grid.major = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\npalette_main <- c(\"#7CB9E8\", \"#B8B8FF\", \"#FFE5B4\", \"#0077BE\", \"#6F00FF\", \"#FFD700\")\npalette_status <- c(\"Profitable\" = \"#7CB9E8\", \"Loss\" = \"#FFB6C1\")\n```\n:::\n\n\n\n# 3. Data Cleaning & Preparation\n\n## 3.1 Load Data\n\nUse **read_csv** to load the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship_data <- read_csv(\"data/Ship_Performance_Dataset.csv\")\n```\n:::\n\n\n\n## 3.2 Data Understanding\n\nUse [glimpse()](https://dplyr.tidyverse.org/reference/glimpse.html) to get an initial overview of the data.\n\n::: panel-tabset\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ship_data)\n```\n:::\n\n\n\n## The Output\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n:::\n\n\n:::\n\nThe dataset contains shipping operations data with 2,736 rows and 18 columns. It tracks various ship metrics including dates (from June 2023), vessel characteristics (ship types like Container Ships and Fish Carriers), and operational parameters (route types ranging from short-haul to transoceanic). The data includes technical specifications such as engine types (HFO, Steam Turbine, Diesel) and maintenance status.\n\nPerformance metrics are recorded through speed (in knots), engine power (kW), distance traveled (nautical miles), and draft (meters). Additional operational data covers weather conditions, cargo weight (tons), costs (USD), revenue per voyage, turnaround time (hours), and efficiency (nm/kWh). The dataset also tracks seasonal impact scores, weekly voyage counts, and average load percentages, providing a comprehensive view of maritime operations. Identify key variables (e.g., ship speed, fuel consumption, voyage distance).\n\n## 3.3 Data Inspection\n\n::: callout-note\n## Data Quality Check Process\n\nWe will perform a comprehensive data quality check including:\n\nMissing values detection\n\nDuplicate records identification\n\nOutlier analysis using z-scores\n\nInvestigation of \"None\" values in categorical variables\n:::\n\nFirst, let's check for missing values, duplicates, and outliers in our dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show/hide code for data quality checks\"}\n# Check for missing values and duplicates\nif (any(is.na(ship_data))) {\n  print(\"There are missing values in the data\")\n} else {\n  print(\"There are no missing values\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"There are no missing values\"\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show/hide code for data quality checks\"}\nif (any(duplicated(ship_data))) {\n  print(\"There are duplicate values in the data\")\n} else {\n  print(\"There are no duplicate values\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"There are no duplicate values\"\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show/hide code for data quality checks\"}\n# Outlier detection using z-scores\nnumeric_columns <- ship_data %>% \n  select(where(is.numeric)) %>% \n  names()\n\nz_scores <- ship_data %>% \n  select(all_of(numeric_columns)) %>% \n  scale() %>% \n  as.data.frame()\n\noutliers <- data.frame()\n\nfor (i in 1:length(numeric_columns)) {\n  column_name <- numeric_columns[i]\n  column_z_scores <- z_scores[, i]\n  \n  outlier_indices <- which(abs(column_z_scores) > 3)\n  \n  if (length(outlier_indices) > 0) {\n    outliers <- rbind(outliers, \n                     data.frame(\n                       Column = column_name,\n                       Row_Index = outlier_indices,\n                       Z_Score = column_z_scores[outlier_indices],\n                       Value = ship_data[[column_name]][outlier_indices]\n                     ))\n  }\n}\n\nif (nrow(outliers) > 0) {\n  print(\"Outliers Detected:\")\n  print(outliers %>% \n        arrange(Column, desc(abs(Z_Score))) %>% \n        group_by(Column) %>% \n        slice_head(n = 5))\n} else {\n  print(\"No Outliers Detected\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No Outliers Detected\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-important\n## Initial Findings\n\nOur analysis shows that the dataset has:\n\nNo missing values\n\nNo duplicate records\n\nNo significant outliers (using 3 standard deviations criterion)\n\nHowever, we observed the presence of \"None\" values in some categorical variables.\n:::\n\nLet's investigate the occurrence of \"None\" values in categorical variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show/hide code for 'None' value analysis\"}\n# Create a summary of 'None' counts\nnone_counts <- ship_data %>%\n  select(where(is.character)) %>%  \n  summarise(across(everything(), ~ sum(. == \"None\", na.rm = TRUE))) %>%\n  pivot_longer(cols = everything(), \n              names_to = \"Variable\", \n              values_to = \"Count\") %>%\n  filter(Count > 0) %>%\n  arrange(desc(Count))\n\n# Display as a simple formatted table\nknitr::kable(none_counts,\n             caption = \"Count of 'None' Values in Categorical Variables\",\n             format = \"html\",\n             col.names = c(\"Variable\", \"Number of 'None' Values\"),\n             align = c(\"l\", \"r\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>Count of 'None' Values in Categorical Variables</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Variable </th>\n   <th style=\"text-align:right;\"> Number of 'None' Values </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Ship_Type </td>\n   <td style=\"text-align:right;\"> 136 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Route_Type </td>\n   <td style=\"text-align:right;\"> 136 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Engine_Type </td>\n   <td style=\"text-align:right;\"> 136 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Maintenance_Status </td>\n   <td style=\"text-align:right;\"> 136 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Weather_Condition </td>\n   <td style=\"text-align:right;\"> 136 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n::: callout-tip\n## Recommendation\n\nBased on these findings, we should:\n\nConsider how to handle \"None\" values in our analysis\n\nPotentially create separate categories for these cases\n\nDocument the meaning of \"None\" in each variable's context\n:::\n\nWe found that 136 records contain `\"None\"` values in certain variables, suggesting that these might be misclassified ship data. Since the `\"None\"` values affect key variables, making these 136 records difficult to categorize, and correcting them is challenging, removing them can improve analytical accuracy.\n\nAdditionally, as only 136 records are affected, the overall dataset integrity remains largely intact. Therefore, in the subsequent data processing steps, we will directly filter out these 136 records.\n\n## 3.4 Encoding Data\n\nPerform the following four data processing steps to achieve:\n\n**Remove rows containing `\"None\"`**: Clean the dataset by eliminating records that cannot be classified or have missing values.\n\n**Create time-related features and a profit variable**: Extract year, month, and year-month information, and calculate the profit for each voyage.\n\n**Delete rows with missing values**: Ensure that the dataset contains only complete records.\n\n**Add a profit status column and convert it to a factor**: Determine whether a ship is profitable based on its profit value and convert the result into a factor type for easier analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship_data_clean <- ship_data %>%\n  filter(\n    !if_any(where(is.character), ~ . == \"None\")  \n  ) %>%\n  mutate(\n    Year = year(Date),\n    Month = month(Date),\n    YearMonth = format(Date, \"%Y-%m\"),\n    Profit_USD = Revenue_per_Voyage_USD - Operational_Cost_USD\n  ) %>%\n  filter(complete.cases(.)) \n\nship_data_clean <- ship_data_clean %>%\n  mutate(Profit_Status = ifelse(Profit_USD >= 0, \"Profitable\", \"Loss\")) %>%\n  mutate(Profit_Status = as.factor(Profit_Status))\n```\n:::\n\n\n\n# 4. Visualization Strategy\n\nBased on the dataset, here are potential analysis directions:\n\n**Trend Analysis → Line Graph (Time Series Chart)**: Use a time series plot to visualize how the ship's performance changes over time, helping to identify long-term trends or cyclical fluctuations.\n\n**Distribution Visualization → Histogram, Density Plot**: These can be used to show the distribution of the data, helping to understand the central tendency and variability.\n\n**Category Comparison → Box Plot, Violin Plot**: These plots allow for comparisons between different categories, highlighting differences in distributions or key metrics across groups.\n\n**Relationship Analysis → Scatter Plot with Regression Line**: Use scatter plots to analyze relationships between two variables, helping to uncover potential correlations or trends.\n\n::: callout-important\n**Note**: Since the data represents individual voyage records, for example, different types of ships might have varying frequencies in the dataset. It’s important to avoid assuming that the initial data quantities for each category (e.g., ship type) are the same. This is crucial to prevent Simpson’s Paradox from affecting the analysis.\n:::\n\n# 5. Exploratory Data Analysis (EDA)\n\n## 5.1 Distribution Analysis\n\nWe will first perform a quantitative distribution visualization analysis on the categorical variables in the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np1 <- ggplot(ship_data_clean, aes(x = Maintenance_Status)) +\n  geom_bar(fill = \"#7CB9E8\", color = \"white\") +\n  theme_custom +\n  labs(\n    title = \"Maintenance Status Distribution\",\n    x = \"Maintenance Status\",\n    y = \"Count\"\n  ) +\n  geom_text(stat = 'count', aes(label = ..count..), vjust = 1.5, size = 2)  \n\np2 <- ggplot(ship_data_clean, aes(x = Engine_Type)) +\n  geom_bar(fill = \"#B8B8FF\", color = \"white\") +\n  theme_custom +\n  labs(\n    title = \"Engine Type Distribution\",\n    x = \"Engine Type\",\n    y = \"Count\"\n  ) +\n  geom_text(stat = 'count', aes(label = ..count..), vjust = 1.5, size = 2) \n\np3 <- ggplot(ship_data_clean, aes(x = Ship_Type)) +\n  geom_bar(fill = \"#FFE5B4\", color = \"white\") +\n  theme_custom +\n  labs(\n    title = \"Ship Type Distribution\",\n    x = \"Ship Type\",\n    y = \"Count\"\n  ) +\n  geom_text(stat = 'count', aes(label = ..count..), vjust = 1.5, size = 2)  \n\np4 <- ggplot(ship_data_clean, aes(x = Route_Type)) +\n  geom_bar(fill = \"#0077BE\", color = \"white\") +\n  theme_custom +\n  labs(\n    title = \"Route Type Distribution\",\n    x = \"Route Type\",\n    y = \"Count\"\n  ) +\n  geom_text(stat = 'count', aes(label = ..count..), vjust = 1.5, size = 2)  \n\np1 + p2 + p3 + p4 + \n  plot_layout(ncol = 2) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe data reveals interesting patterns across maintenance status, engine types, ship types, and route types:\n\nMaintenance Status shows an almost even distribution, with Critical (716), Fair (713), and Good (698) conditions having similar counts. This suggests consistent wear patterns across the fleet but also indicates that about one-third of vessels require urgent attention.\n\nEngine Type distribution is also relatively balanced between Diesel (721), Heavy Fuel Oil (702), and Steam Turbine (704) engines, showing no strong preference for any particular propulsion technology.\n\nShip Type distribution is remarkably uniform across Bulk Carrier (550), Container Ship (524), Fish Carrier (521), and Tanker (532), indicating a well-diversified fleet composition.\n\nRoute Type shows some variation, with Long-haul (556) and Coastal (533) routes being more common, while Short-haul (513) and Transoceanic (518) routes are slightly less frequent. This suggests a focus on both regional and long-distance shipping operations.\n\n## 5.2 Time Series Analysis\n\nFirst, let's take a look at how income and cost change over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntime_analysis <- ship_data_clean %>%\n  group_by(YearMonth) %>%\n  summarise(\n    Average_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Average_Cost = mean(Operational_Cost_USD, na.rm = TRUE),\n    Voyage_Count = n()\n  ) %>%\n  pivot_longer(cols = c(Average_Revenue, Average_Cost),\n               names_to = \"Metric\",\n               values_to = \"Amount\")\n\nggplot(time_analysis, aes(x = YearMonth, y = Amount, color = Metric, group = Metric)) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 1) +\n  theme_custom +\n  scale_color_manual(values = c(\"Average_Revenue\" = \"#7CB9E8\", \"Average_Cost\" = \"#FFB6C1\")) +\n  labs(\n    title = \"Revenue and Cost Trends Over Time\",\n    subtitle = \"Monthly Average Comparison\",\n    x = \"Year-Month\",\n    y = \"Amount (USD)\"\n  ) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  geom_text(aes(label = scales::dollar(Amount),colour = \"black\"), vjust = -1.5, size = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nRevenue (blue line) has experienced significant fluctuations, with peaks around \\$551,000 in February-March 2024 and lows near \\$489,000 in December 2023. The overall trend shows a slight decline from early 2024 to June 2024. Costs (pink line) have remained relatively stable, ranging between \\$235,000-\\$285,000, with a notable spike in October 2023 at approximately \\$285,000.\n\nThe gap between revenue and costs (profit margin) was largest in February-March 2024 and smallest in December 2023, indicating varying business performance throughout the year. Despite fluctuations, both revenue and costs show a general stabilizing trend in the most recent months of 2024.\n\nNext, let's examine the time series variation of profit across different ship types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean %>%\n         group_by(YearMonth, Ship_Type) %>%\n         summarise(avg_profit = mean(Profit_USD), .groups = \"drop\"), \n       aes(x = YearMonth, y = avg_profit, color = Ship_Type, group = Ship_Type)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = palette_main) +\n  theme_custom +\n  labs(\n    title = \"Monthly Profit Trends by Ship Type\",\n    subtitle = \"Average Monthly Profit Performance\",\n    x = \"Year-Month\",\n    y = \"Average Profit (USD)\"\n  ) +\n  scale_y_continuous(labels = scales::dollar_format()) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nThis line graph displays monthly profit trends for four different ship types from June 2023 to June 2024.\n\nBulk Carriers offer the highest profit potential but also the greatest risk, suggesting they're best for risk-tolerant investors. Their dramatic swings (\\$150K to \\$400K) indicate high market sensitivity. Fish Carriers consistently perform around \\$250K-\\$300K, making them the most reliable choice for stable returns. After a collective downturn in late 2023, all ship types showed recovery in early 2024, indicating overall market improvement. Container Ships and Fish Carriers show opposing cycles, suggesting a potential diversification strategy to balance portfolio risks.\n\n## 5.3 Profit Analysis\n\nIn this step, I will analyze profit to explore trends or patterns related to profit.\n\n### 5.3.1 Profit Distribution Analysis\n\n::::::: panel-tabset\n## Ship Type\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean, aes(x = Ship_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_violin(aes(fill = Profit_Status),\n              adjust = 1.2, \n              trim = FALSE, \n              alpha = 0.5) +\n  \n  geom_point(aes(x = Ship_Type, y = Profit_USD, colour = Profit_Status),\n             position = position_jitter(width = .05), size = 0.25, shape = 20) +\n\n  geom_boxplot(outlier.shape = NA, alpha = 0.5, width = 0.1, colour = \"black\") +\n  \n  scale_fill_manual(values = palette_status) +\n  scale_color_manual(values = palette_status) +\n  \n  theme_custom +\n\n  labs(\n    title = \"Profit Distribution by Ship Type\",\n    subtitle = \"Box Plot showing Profit/Loss Ranges\",\n    x = \"Ship Type\",\n    y = \"Profit (USD)\",\n    fill = \"Profit Status\"\n  ) +\n  \n  scale_y_continuous(labels = scales::dollar_format()) +\n  \n  stat_summary(fun = median, geom = \"label\", aes(label = round(..y.., 0)), \n             vjust = -0.2, color = \"black\", size = 2, \n             label.padding = unit(0.1, \"lines\"),             \n             alpha = 0.6,                         \n             label.size = 0)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\nAll ship types show both profitable (blue) and loss-making (pink) periods, with potential profits generally outweighing losses. The median profit (center line) is consistently around \\$300,000-\\$350,000 across all types.\n\nBulk Carriers show the widest profit distribution, indicating highest volatility. Container Ships have more concentrated profit ranges, suggesting more stable returns. Fish Carriers and Tankers show similar distribution patterns, with moderate volatility.\n\nThe loss distributions (pink) are generally smaller than profit distributions (blue), suggesting the shipping industry has better upside potential than downside risk across all vessel types.\n\nThe data suggests Container Ships might be the safest choice for risk-averse investors, while Bulk Carriers offer higher profit potential with greater risk.\n:::\n\n## Engine Type\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean, aes(x = Engine_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_violin(aes(fill = Profit_Status),\n              adjust = 1.2, \n              trim = FALSE, \n              alpha = 0.5) +\n  \n  geom_point(aes(x = Engine_Type, y = Profit_USD, colour = Profit_Status),\n             position = position_jitter(width = .05), size = 0.25, shape = 20) +\n  \n  geom_boxplot(outlier.shape = NA, alpha = 0.5, width = 0.1, colour = \"black\") +\n  \n  scale_fill_manual(values = palette_status) +\n  scale_color_manual(values = palette_status) +\n  \n  theme_custom +\n  \n  labs(\n    title = \"Profit Distribution by Engine Type\",\n    subtitle = \"Box Plot Analysis of Engine Performance\",\n    x = \"Engine Type\",\n    y = \"Profit (USD)\",\n    fill = \"Profit Status\"\n  ) +\n  \n  scale_y_continuous(labels = scales::dollar_format()) +\n  \n  stat_summary(fun = median, geom = \"label\", aes(label = round(..y.., 0)), \n             vjust = -0.2, color = \"black\", size = 2, \n             label.padding = unit(0.1, \"lines\"),             \n             alpha = 0.6,                         \n             label.size = 0) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\nAll three engine types (Diesel, HFO, Steam Turbine) show remarkably similar profit distributions, with median profits around \\$320,000-\\$370,000.\n\nAll engine types have comparable profit potential, reaching up to \\$1,000,000. Loss risks are also similar, with maximum losses around -\\$500,000. The symmetrical distributions suggest balanced risk-reward ratios\n\nSteam Turbine shows slightly higher median profits (\\$370,777). HFO engines demonstrate the most concentrated profit distribution. Diesel engines show marginally wider variation in profitable scenarios\n\nThe similar distributions suggest engine choice might be better based on factors like fuel costs and maintenance requirements rather than profit potential alone.\n:::\n\n## Route Type\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean, aes(x = Route_Type, y = Profit_USD, fill = Profit_Status)) +\n  geom_violin(aes(fill = Profit_Status),\n              adjust = 1.2, \n              trim = FALSE, \n              alpha = 0.5) +\n  \n  geom_point(aes(x = Route_Type, y = Profit_USD, colour = Profit_Status),\n             position = position_jitter(width = .05), size = 0.25, shape = 20) +\n  \n  geom_boxplot(outlier.shape = NA, alpha = 0.5, width = 0.1, colour = \"black\") +\n  \n  scale_fill_manual(values = palette_status) +\n  scale_color_manual(values = palette_status) +\n  \n  theme_custom +\n  \n  labs(\n    title = \"Profit Distribution by Route Type\",\n    subtitle = \"Analysis of Route Profitability\",\n    x = \"Route Type\",\n    y = \"Profit (USD)\",\n    fill = \"Profit Status\"\n  ) +\n  \n  scale_y_continuous(labels = scales::dollar_format()) +\n  \n  stat_summary(fun = median, geom = \"label\", aes(label = round(..y.., 0)), \n             vjust = -0.2, color = \"black\", size = 2, \n             label.padding = unit(0.1, \"lines\"),             \n             alpha = 0.6,                         \n             label.size = 0) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\nLong-haul routes show highest median profits (\\$379,042). Transoceanic routes follow closely (\\$373,077). Coastal and Short-haul routes show slightly lower medians (\\$337,844 and \\$364,042).\n\nAll routes share similar maximum profit potential (around \\$1,000,000). Loss risks are comparable across routes (around -\\$500,000). Profit distributions are more concentrated in Long-haul and Transoceanic routes.\n\nLong-haul routes offer best risk-adjusted returns. Coastal routes show widest profit variation, suggesting higher operational uncertainty. Short-haul routes demonstrate balanced risk-reward profile.\n:::\n\n## Maintenance Status\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean, aes(x = Maintenance_Status, y = Profit_USD, fill = Profit_Status)) +\n  geom_violin(aes(fill = Profit_Status),\n              adjust = 1.2, \n              trim = FALSE, \n              alpha = 0.5) +\n  \n  geom_point(aes(x = Maintenance_Status, y = Profit_USD, colour = Profit_Status),\n             position = position_jitter(width = .05), size = 0.25, shape = 20) +\n  \n  geom_boxplot(outlier.shape = NA, alpha = 0.5, width = 0.1, colour = \"black\") +\n  \n  scale_fill_manual(values = palette_status) +\n  scale_color_manual(values = palette_status) +\n  \n  theme_custom +\n  \n  labs(\n    title = \"Profit Distribution by Maintenance Status\",\n    subtitle = \"Impact of Maintenance on Profitability\",\n    x = \"Maintenance Status\",\n    y = \"Profit (USD)\",\n    fill = \"Profit Status\"\n  ) +\n  \n  scale_y_continuous(labels = scales::dollar_format()) +\n  \n  stat_summary(fun = median, geom = \"label\", aes(label = round(..y.., 0)), \n             vjust = -0.2, color = \"black\", size = 2, \n             label.padding = unit(0.1, \"lines\"),             \n             alpha = 0.6,                         \n             label.size = 0)     \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n'Good' maintenance status shows lowest median profit (\\$336,322). 'Critical' maintenance shows highest median (\\$365,267). 'Fair' maintenance falls in between (\\$357,942).\n\nSurprisingly, ships in critical maintenance condition show higher profit potential. This might suggest aggressive operational strategies with deferred maintenance. Could indicate a short-term profit vs. long-term sustainability trade-off.\n\nAll maintenance states show similar loss potentials (-\\$500,000). Profit distributions are more concentrated in 'Good' maintenance status. 'Critical' status shows wider profit variation, indicating higher operational uncertainty.\n\nWhile critical maintenance status shows higher profits, this might not be sustainable long-term and could lead to increased future costs or safety risks.\n:::\n:::::::\n\n### 5.3.2 Profit Analysis under Different Combinations\n\nNext, we will visualize the top 15 combinations with the highest profit in the dataset, further observing which combinations contribute the most to profit.\n\nThe following code is used to calculate the combination details:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntop_combinations <- ship_data_clean %>%\n  filter(!is.na(Ship_Type), !is.na(Engine_Type), !is.na(Route_Type), !is.na(Maintenance_Status), !is.na(Profit_USD)) %>%\n  group_by(Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  summarise(mean_profit = mean(Profit_USD, na.rm = TRUE), .groups = \"drop\") %>%\n  arrange(desc(mean_profit)) %>%\n  head(15)\n\nggplot(top_combinations, \n       aes(y = reorder(paste(Ship_Type, Engine_Type, Route_Type, Maintenance_Status), mean_profit), \n           x = mean_profit, \n           fill = mean_profit)) +\n  geom_col() +\n  scale_fill_gradient(low = \"#7CB9E8\", high = \"#FFB6CE\") +\n  theme_custom +\n  labs(\n    title = \"Top 15 Most Profitable Combinations\",\n    subtitle = \"Analysis of Ship, Engine, Route, and Maintenance Combinations\",\n    y = \"Combination\",\n    x = \"Average Profit (USD)\",\n    fill = \"Average Profit\"\n  ) +\n  scale_x_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntop_combinations_freq <- top_combinations %>%\n  gather(key = \"Variable\", value = \"Value\", Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  count(Variable, Value) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\nThis horizontal bar chart shows the top 15 most profitable combinations of ship, engine, route, and maintenance status.\n\nTop Performers:\n\nTanker with HFO engine on short-haul routes with fair maintenance leads profitability (\\$480,000+)\n\nFish Carriers with HFO engines on long-haul routes rank second\n\nContainer Ships with Steam Turbines on long-haul routes rank third\n\nPattern Analysis:\n\nHFO engines appear frequently in top combinations\n\nCritical and Fair maintenance statuses dominate the top spots\n\nShort-haul and Long-haul routes are more common in top performers\n\nKey Combinations:\n\nFish Carriers show strong performance across different configurations\n\nContainer Ships appear in multiple top combinations\n\nFair maintenance status appears more often in highest-profit combinations\n\n::: callout-caution\nNext, we will explore the occurrences of these four categories in the top 15 profit-generating combinations. Since the data volumes for these four categories are not the same, we need to standardize the frequency counts.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntop_combinations <- ship_data_clean %>%\n  filter(!is.na(Ship_Type), !is.na(Engine_Type), !is.na(Route_Type), !is.na(Maintenance_Status), !is.na(Profit_USD)) %>%\n  group_by(Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  summarise(\n    mean_profit = mean(Profit_USD, na.rm = TRUE),\n    freq = n(),\n    .groups = \"drop\"  \n  ) %>%\n  arrange(desc(mean_profit))\n\ntop_combinations <- top_combinations %>%\n  mutate(\n    freq_std = (freq - mean(top_combinations$freq)) / sd(top_combinations$freq)\n  )\n\ntop_15_after <- top_combinations %>%\n  arrange(desc(freq_std)) %>%\n  head(15)\n\ntop_combinations_freq_after <- top_15_after %>%\n  gather(key = \"Variable\", value = \"Value\", Ship_Type, Engine_Type, Route_Type, Maintenance_Status) %>%\n  group_by(Variable, Value) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  ungroup()\n\ntop_combinations_freq_after <- top_combinations_freq_after %>%\n  mutate(n = case_when(\n    Variable == \"Ship_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Ship_Type)],\n    Variable == \"Engine_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Engine_Type)],\n    Variable == \"Route_Type\" ~ top_15_after$freq_std[match(Value, top_15_after$Route_Type)],\n    Variable == \"Maintenance_Status\" ~ top_15_after$freq_std[match(Value, top_15_after$Maintenance_Status)],\n    TRUE ~ NA_real_\n  ))\n```\n:::\n\n\n\nNext, we will visualize and compare the occurrences before and after standardization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntop_combinations_freq$type <- \"Frequency\"\ntop_combinations_freq_after$type <- \"Standardized Frequency\"\n\ncombined_data <- bind_rows(top_combinations_freq, top_combinations_freq_after)\n\np <- ggplot(combined_data, aes(x = reorder(Value, n), y = n, fill = n)) +\n  geom_col() +\n  facet_grid(type ~ Variable, scales = \"free_x\") + \n  scale_fill_gradient(low = \"#7CB9E8\", high = \"#FFB6C1\") +\n  theme_minimal() +  \n  labs(\n    title = \"Comparison of Frequency and Standardized Frequency in Top 15 Combinations\",\n    x = \"Element\",\n    y = \"Count\",\n    fill = \"Value\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text = element_text(face = \"bold\")\n  ) +\n  geom_text(aes(label = round(n, 2)), vjust = 1, size = 2)\n\nprint(p)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nHeavy Fuel Oil (HFO) engines show the highest frequency (7) among engine types, while Steam Turbine has a higher standardized frequency (2.97) compared to Diesel (1.81).\n\nIn maintenance status, Critical conditions have the highest frequency (8), though Good and Fair conditions show similar standardized frequencies (around 2.97 and 2.39 respectively).\n\nRoute types show balanced actual frequencies (3-4 occurrences each), with Transoceanic routes having a slightly higher standardized frequency (2.97) compared to Coastal routes (1.81).\n\nFor ship types, Container Ships and Fish Carriers both show high actual frequencies (5 each), and Fish Carriers maintain the highest standardized frequency (2.97) among all ship types.\n\n::: callout-tip\nThe comparison between actual and standardized frequencies helps identify patterns that might not be immediately apparent from raw counts alone, particularly in highlighting the relative importance of different categories when normalized.\n:::\n\n## 5.5 Efficiency Analysis\n\nNext, we will perform a visual analysis of the operational efficiency of different types of ships.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_data_clean, aes(x = Efficiency_nm_per_kWh, y = Profit_USD)) +\n  geom_density_2d_filled(alpha = 0.7) +\n  geom_smooth(color = \"white\", se = TRUE) +\n  facet_wrap(~Ship_Type) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"white\") +\n  theme_custom +\n  labs(\n    title = \"Efficiency vs Profit Density by Ship Type\",\n    subtitle = \"Relationship between Efficiency and Profitability\",\n    x = \"Efficiency (nm/kWh)\",\n    y = \"Profit (USD)\"\n  ) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nThe visualization shows the relationship between efficiency (nm/kWh) and profit (USD) across four ship types: Bulk Carrier, Container Ship, Fish Carrier, and Tanker.\n\nAll ship types show clear \"sweet spots\" (yellow/light green areas) where profit is maximized at specific efficiency levels, typically between 0.6-1.0 nm/kWh. Fish Carriers demonstrate the most distinct profit optimization patterns, with multiple high-profit zones across different efficiency levels, suggesting more operational flexibility. Container Ships and Tankers show more concentrated profit peaks around 0.8 nm/kWh, indicating a narrower optimal operating range.\n\nThe white lines (possibly representing average or trend lines) are relatively stable across efficiency ranges, suggesting that dramatic efficiency improvements may not always translate to proportional profit increases. Bulk Carriers show the most evenly distributed profit patterns, indicating they might be more resilient to efficiency variations.\n\n# 6. Conclusion: The Art of Balancing Efficiency and Profit\n\nIn the vast expanse of the maritime industry, every vessel tells a unique story. Our deep dive into ship performance data reveals an intriguing truth: optimal solutions often lie in balance rather than in the pursuit of extremes.\n\n## 6.1 The Subtle Dance of Efficiency and Profit\n\nConventional wisdom suggests that higher efficiency invariably leads to better returns. However, our data tells a more nuanced story. Ships operate best within specific efficiency zones (0.6-1.0 nautical miles per kilowatt-hour), much like how cars perform optimally at certain speeds on a highway. Pushing beyond these zones often yields diminishing returns, challenging the \"more is better\" mindset that dominates many operational strategies.\n\nFish Carriers emerge as particularly fascinating examples of adaptability in this context. Their ability to maintain profitability across various efficiency ranges demonstrates that operational flexibility can be as valuable as peak performance. This insight transforms our understanding of maritime operations from a simple pursuit of maximum efficiency to a more sophisticated balancing act.\n\n## 6.2 The Symphony of Fleet Composition\n\nThink of different ship types as instruments in an orchestra, each playing its unique role in creating a harmonious performance. Bulk Carriers, with their high profit potential and volatility, act as the bold percussion section - capable of dramatic impact but requiring careful management. Container Ships provide the steady rhythm, offering more predictable returns that form the backbone of fleet operations. Fish Carriers and Tankers complete the ensemble, each contributing their distinct characteristics to create a well-rounded fleet performance.\n\nThis diversity isn't just about risk management - it's about creating a resilient system capable of adapting to changing market conditions. The data suggests that successful fleet operations rely not on maximizing the performance of any single vessel type, but on orchestrating a balanced combination that can weather various market conditions.\n\n## 6.3 Strategic Route Selection: Beyond Simple Geography\n\nThe relationship between routes and profitability reveals another layer of complexity in maritime operations. While long-haul and transoceanic routes show superior profit potential, coastal routes play an essential role in maintaining comprehensive market coverage. This distribution pattern suggests that successful route strategy isn't simply about maximizing distance or profit per journey - it's about weaving together a network that serves both immediate profitability and long-term market presence.\n\n## 6.4 The Maintenance Paradox\n\nPerhaps the most thought-provoking finding emerges from our maintenance analysis. Ships in critical maintenance status counterintuitively show higher short-term profits, presenting operators with a complex dilemma. This correlation likely represents a temporary trade-off between immediate returns and long-term reliability, much like how deferring maintenance on any complex system might temporarily reduce costs but ultimately lead to more significant issues.\n\nThe similar profit distributions across engine types (Diesel, HFO, Steam Turbine) further complicate this picture, suggesting that maintenance decisions should prioritize long-term sustainability over short-term cost savings. This finding challenges fleet operators to think beyond quarterly profits and consider the broader implications of their maintenance strategies.\n\n## 6.5 Looking to the Future\n\nThe maritime industry stands at a crossroads where traditional operational wisdom meets modern data-driven insights. Our analysis suggests that successful fleet operations require a delicate balance of efficiency, risk management, and long-term sustainability. The key lies not in pursuing extremes but in finding the sweet spots where various operational factors align optimally.\n\nAs we look ahead, the most successful operators will likely be those who can maintain this balance while adapting to new challenges. Whether it's environmental regulations, changing market conditions, or technological advances, the ability to maintain operational flexibility while ensuring sustainable practices will become increasingly crucial.\n\nThis analysis not only provides insights into current maritime operations but also offers a framework for thinking about future challenges. In an industry as dynamic as maritime shipping, understanding these complex relationships between efficiency, profit, and sustainability isn't just about optimizing current operations - it's about preparing for the future of maritime commerce.\n\n# 7. References\n\n**ggplot2**: [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/)\n\n**tidyverse**: [tidyverse.org](https://www.tidyverse.org/)\n\n**dplyr**: [dplyr.tidyverse.org](https://dplyr.tidyverse.org/)\n\n**scales**: [scales.r-lib.org](https://scales.r-lib.org/)\n\n**ggridges**: [CRAN link](https://cran.r-project.org/web/packages/ggridges/)\n\n**patchwork**: [patchwork.data-imaginist.com](https://patchwork.data-imaginist.com/)\n\n**tidyr**: [tidyr.tidyverse.org](https://tidyr.tidyverse.org/)\n",
    "supporting": [
      "Take-home_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}